#!/bin/python3

import math
import os
import random
import re
import sys
import string
#
# Complete the 'minimumNumber' function below.
#
# The function is expected to return an INTEGER.
# The function accepts following parameters:
#  1. INTEGER n
#  2. STRING password
#

def minimumNumber(n, password):
    # Return the minimum number of characters to make the password strong
    min_val=0
    has_num=False
    has_lower=False
    has_upper=False
    has_special=False
    special_char="!@#$%^&*()-+"
    for i in password:
        if i.isdigit():
            has_num=True
        elif i.islower():
            has_lower=True
        elif i.isupper():
            has_upper=True
        elif i in special_char:
            has_special=True
    if not has_num:
        min_val+=1
    if not has_lower:
        min_val+=1
    if not has_upper:
        min_val+=1
    if not has_special:
        min_val+=1          
    return max(min_val,6-n)

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    n = int(input().strip())

    password = input()

    answer = minimumNumber(n, password)

    fptr.write(str(answer) + '\n')

    fptr.close()


concised form

import string

def minimumNumber(n, password):
    missing = 0
    has = {'digit': False, 'lower': False, 'upper': False, 'special': False}
    special = set('!@#$%^&*()-+')

    for char in password:
        if char.isdigit(): has['digit'] = True
        elif char.islower(): has['lower'] = True
        elif char.isupper(): has['upper'] = True
        elif char in special: has['special'] = True

    missing = sum(1 for key in has if not has[key])
    return max(missing, 6 - n)

if _name_ == '_main_':
    import os
    with open(os.environ['OUTPUT_PATH'], 'w') as fptr:
        n = int(input())
        password = input()
        fptr.write(str(minimumNumber(n, password)) + '\n')
